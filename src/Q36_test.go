package src

import "testing"

func Test_isValidSudoku(t *testing.T) {
	type args struct {
		board [][]byte
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			"1",
			args{
				[][]byte{
					{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
					{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
					{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
					{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
					{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
					{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
					{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
					{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
					{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
				},
			},
			true,
		},
		{
			"1",
			args{
				[][]byte{
					{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
					{'6', '.', '3', '1', '9', '5', '.', '.', '.'},
					{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
					{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
					{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
					{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
					{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
					{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
					{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
				},
			},
			false,
		},
		{
			"1",
			args{
				[][]byte{
					{'.','.','.','.','5','.','.','1','.'},
					{'.','4','.','3','.','.','.','.','.'},
					{'.','.','.','.','.','3','.','.','1'},
					{'8','.','.','.','.','.','.','2','.'},
					{'.','.','2','.','7','.','.','.','.'},
					{'.','1','5','.','.','.','.','.','.'},
					{'.','.','.','.','.','2','.','.','.'},
					{'.','2','.','9','.','.','.','.','.'},
					{'.','.','4','.','.','.','.','.','.'},
				},
			},
			false,
		},{
			"1",
			args{
				[][]byte{
					{'.','.','4','.','.','.','6','3','.'},
					{'.','.','.','.','.','.','.','.','.'},
					{'5','.','.','.','.','.','.','9','.'},
					{'.','.','.','5','6','.','.','.','.'},
					{'4','.','3','.','.','.','.','.','1'},
					{'.','.','.','7','.','.','.','.','.'},
					{'.','.','.','5','.','.','.','.','.'},
					{'.','.','.','.','.','.','.','.','.'},
					{'.','.','.','.','.','.','.','.','.'},
				},
			},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsValidSudoku3(tt.args.board); got != tt.want {
				t.Errorf("isValidSudoku() = %v, want %v", got, tt.want)
			}
		})
	}
}

//20456ns/op
func BenchmarkIsValidSudoku(b *testing.B) {
	for i := 0; i < b.N; i++ {
		a := [][]byte{
			{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			{'6', '.', '3', '1', '9', '5', '.', '.', '.'},
			{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		}
		IsValidSudoku(a)
	}
}
//3201ns/op
func BenchmarkIsValidSudoku2(b *testing.B) {
	for i := 0; i < b.N; i++ {
		a := [][]byte{
			{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			{'6', '.', '3', '1', '9', '5', '.', '.', '.'},
			{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		}
		IsValidSudoku2(a)
	}
}

//2014ns/op
func BenchmarkIsValidSudoku3(b *testing.B) {
	for i := 0; i < b.N; i++ {
		a := [][]byte{
			{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			{'6', '.', '3', '1', '9', '5', '.', '.', '.'},
			{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		}
		IsValidSudoku3(a)
	}
}